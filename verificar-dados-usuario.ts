import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || '';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarDadosUsuario(userId: string) {
  console.log(`üîç Verificando dados para o usu√°rio: ${userId}\n`);
  
  try {
    // Verificar produtos do usu√°rio
    console.log('üì¶ Verificando produtos do usu√°rio...');
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .eq('user_id', userId);
    
    if (productsError) {
      console.error('‚ùå Erro ao buscar produtos:', productsError.message);
    } else {
      console.log(`‚úÖ Encontrados ${products?.length || 0} produtos para este usu√°rio`);
      if (products && products.length > 0) {
        console.log('   Produtos:');
        products.forEach((product: any) => {
          console.log(`   - ${product.name} (ID: ${product.id}, Criado em: ${new Date(product.created_at).toLocaleString()})`);
        });
      }
    }
    
    // Verificar clientes do usu√°rio
    console.log('\nüë• Verificando clientes do usu√°rio...');
    const { data: clients, error: clientsError } = await supabase
      .from('clients')
      .select('*')
      .eq('user_id', userId);
    
    if (clientsError) {
      console.error('‚ùå Erro ao buscar clientes:', clientsError.message);
    } else {
      console.log(`‚úÖ Encontrados ${clients?.length || 0} clientes para este usu√°rio`);
      if (clients && clients.length > 0) {
        console.log('   Clientes:');
        clients.forEach((client: any) => {
          console.log(`   - ${client.name} (ID: ${client.id}, Criado em: ${new Date(client.created_at).toLocaleString()})`);
        });
      }
    }
    
    // Verificar transa√ß√µes do usu√°rio
    console.log('\nüí∞ Verificando transa√ß√µes do usu√°rio...');
    const { data: transactions, error: transactionsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId);
    
    if (transactionsError) {
      console.error('‚ùå Erro ao buscar transa√ß√µes:', transactionsError.message);
    } else {
      console.log(`‚úÖ Encontradas ${transactions?.length || 0} transa√ß√µes para este usu√°rio`);
      if (transactions && transactions.length > 0) {
        console.log('   Transa√ß√µes:');
        transactions.forEach((transaction: any) => {
          console.log(`   - ${transaction.type} de ${transaction.quantity} itens (ID: ${transaction.id}, Criado em: ${new Date(transaction.created_at).toLocaleString()})`);
        });
      }
    }
    
    console.log('\nüìã Verifica√ß√£o conclu√≠da!');
    
  } catch (error: any) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    process.exit(1);
  }
}

// Verificar se foi passado um ID de usu√°rio como argumento
const userId = process.argv[2];

if (!userId) {
  console.log('Uso: npx ts-node verificar-dados-usuario.ts <USER_ID>');
  console.log('Para obter seu USER_ID, fa√ßa login no sistema e verifique o console do navegador.');
  process.exit(1);
}

// Executar verifica√ß√£o
verificarDadosUsuario(userId);