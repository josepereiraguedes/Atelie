# Script PowerShell para solucionar erro de login "Invalid login credentials"
# Uso: .\solucionar-erro-login.ps1

Write-Host "üîç Solucionando erro de login 'Invalid login credentials'..." -ForegroundColor Yellow
Write-Host ""

# Fun√ß√£o para verificar se uma depend√™ncia est√° instalada
function Test-Command {
    param (
        [string]$Command
    )
    
    try {
        $commandResult = Get-Command $Command -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

# Verificar depend√™ncias
Write-Host "üîß Verificando depend√™ncias..." -ForegroundColor Cyan

# Verificar Node.js
if (-not (Test-Command "node")) {
    Write-Host "‚ùå Node.js n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Por favor, instale o Node.js para executar este script" -ForegroundColor Yellow
    exit 1
} else {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
}

# Verificar npm
if (-not (Test-Command "npm")) {
    Write-Host "‚ùå npm n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° npm √© necess√°rio para instalar depend√™ncias" -ForegroundColor Yellow
    exit 1
} else {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm encontrado: $npmVersion" -ForegroundColor Green
}

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path ".env")) {
    Write-Host "‚ùå Arquivo .env n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Certifique-se de estar no diret√≥rio raiz do projeto" -ForegroundColor Yellow
    Write-Host "üí° Diret√≥rio atual: $(Get-Location)" -ForegroundColor Yellow
    exit 1
} else {
    Write-Host "‚úÖ Arquivo .env encontrado" -ForegroundColor Green
}

# Verificar se as vari√°veis de ambiente est√£o definidas
$envContent = Get-Content ".env" -Raw
if ($envContent -notlike "*VITE_SUPABASE_URL*") {
    Write-Host "‚ùå VITE_SUPABASE_URL n√£o encontrada no .env!" -ForegroundColor Red
    exit 1

}

if ($envContent -notlike "*VITE_SUPABASE_ANON_KEY*") {
    Write-Host "‚ùå VITE_SUPABASE_ANON_KEY n√£o encontrada no .env!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Vari√°veis de ambiente configuradas corretamente" -ForegroundColor Green

# Verificar depend√™ncias do projeto
Write-Host "üîß Verificando depend√™ncias do projeto..." -ForegroundColor Cyan

# Verificar se node_modules existe
if (-not (Test-Path "node_modules")) {
    Write-Host "‚ö†Ô∏è  node_modules n√£o encontrado, instalando depend√™ncias..." -ForegroundColor Yellow
    npm install
} else {
    Write-Host "‚úÖ node_modules encontrado" -ForegroundColor Green
}

# Verificar se @supabase/supabase-js est√° instalado
if (-not (Test-Path "node_modules/@supabase/supabase-js")) {
    Write-Host "‚ö†Ô∏è  @supabase/supabase-js n√£o encontrado, instalando..." -ForegroundColor Yellow
    npm install @supabase/supabase-js
} else {
    Write-Host "‚úÖ @supabase/supabase-js encontrado" -ForegroundColor Green
}

# Verificar se dotenv est√° instalado
if (-not (Test-Path "node_modules/dotenv")) {
    Write-Host "‚ö†Ô∏è  dotenv n√£o encontrado, instalando..." -ForegroundColor Yellow
    npm install dotenv
} else {
    Write-Host "‚úÖ dotenv encontrado" -ForegroundColor Green
}

# Verificar se ts-node est√° instalado
if (-not (Test-Command "ts-node")) {
    Write-Host "‚ö†Ô∏è  ts-node n√£o encontrado, instalando globalmente..." -ForegroundColor Yellow
    npm install -g ts-node typescript @types/node
} else {
    Write-Host "‚úÖ ts-node encontrado" -ForegroundColor Green
}

Write-Host ""
Write-Host "üß™ Executando testes de diagn√≥stico..." -ForegroundColor Cyan
Write-Host ""

# Teste 1: Verificar vari√°veis de ambiente
Write-Host "1Ô∏è‚É£ Verificando vari√°veis de ambiente..." -ForegroundColor Cyan
try {
    npx ts-node verificar-env.ts
    Write-Host "‚úÖ Vari√°veis de ambiente carregadas corretamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao verificar vari√°veis de ambiente" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Teste 2: Verificar conex√£o com Supabase
Write-Host ""
Write-Host "2Ô∏è‚É£ Testando conex√£o com Supabase..." -ForegroundColor Cyan
try {
    npx ts-node testar-conexao-correta.ts
    Write-Host "‚úÖ Conex√£o com Supabase estabelecida" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na conex√£o com Supabase" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Teste 3: Verificar autentica√ß√£o
Write-Host ""
Write-Host "3Ô∏è‚É£ Testando autentica√ß√£o..." -ForegroundColor Cyan
try {
    npx ts-node testar-login.ts
    Write-Host "‚úÖ Sistema de autentica√ß√£o funcionando" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro no sistema de autentica√ß√£o" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üìã Resumo dos testes:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Vari√°veis de ambiente carregadas corretamente" -ForegroundColor Green
Write-Host "   ‚úÖ Conex√£o com Supabase estabelecida" -ForegroundColor Green
Write-Host "   ‚úÖ Sistema de autentica√ß√£o funcionando" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Se voc√™ ainda est√° tendo problemas de login:" -ForegroundColor Yellow
Write-Host "   1. Verifique se est√° usando as credenciais corretas" -ForegroundColor Yellow
Write-Host "   2. Confirme que n√£o h√° espa√ßos extras no email/senha" -ForegroundColor Yellow
Write-Host "   3. Verifique se o usu√°rio j√° foi registrado" -ForegroundColor Yellow
Write-Host "   4. Consulte SOLUCAO-ERRO-LOGIN.md para mais detalhes" -ForegroundColor Yellow
Write-Host ""
Write-Host "üìÑ Documenta√ß√£o:" -ForegroundColor Cyan
Write-Host "   - SOLUCAO-ERRO-LOGIN.md" -ForegroundColor White
Write-Host "   - CONFIG-SUPABASE-COMPLETA.md" -ForegroundColor White
Write-Host ""
Write-Host "üéâ Diagn√≥stico conclu√≠do!" -ForegroundColor Green