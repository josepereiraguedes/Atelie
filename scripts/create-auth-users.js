// Script para criar usu√°rios de autentica√ß√£o no Supabase
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { resolve } from 'path';

// Carregar vari√°veis de ambiente do arquivo .env
config({ path: resolve(process.cwd(), '.env') });

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
// Usar service role key para criar usu√°rios
const supabaseServiceRoleKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

console.log('=== Cria√ß√£o de Usu√°rios de Autentica√ß√£o Supabase ===');

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('‚ùå ERRO: Credenciais do Supabase n√£o configuradas!');
  console.error('Configure VITE_SUPABASE_URL e VITE_SUPABASE_SERVICE_ROLE_KEY no arquivo .env');
  process.exit(1);
}

// Criar cliente Supabase com service role key para acesso administrativo
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Usu√°rios padr√£o
const defaultUsers = [
  {
    email: 'pereiraguedes1988@gmail.com',
    password: '31051988',
    name: 'Usu√°rio 1'
  },
  {
    email: 'josepereiraguedes@yahoo.com.br',
    password: '31052025',
    name: 'Usu√°rio 2'
  }
];

async function createAuthUsers() {
  console.log('\nüöÄ Iniciando cria√ß√£o de usu√°rios de autentica√ß√£o...');
  
  try {
    // Verificar se j√° existem usu√°rios
    const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (listError) {
      console.error('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel verificar usu√°rios existentes:', listError.message);
      console.log('Continuando com a cria√ß√£o dos usu√°rios...\n');
    } else {
      const existingEmails = existingUsers?.users?.map(u => u.email) || [];
      console.log(`‚úÖ Encontrados ${existingUsers?.users?.length || 0} usu√°rios existentes`);
      
      // Filtrar usu√°rios que j√° existem
      const usersToCreate = defaultUsers.filter(user => !existingEmails.includes(user.email));
      
      if (usersToCreate.length === 0) {
        console.log('‚ÑπÔ∏è  Todos os usu√°rios padr√£o j√° existem. Nada a fazer.');
        process.exit(0);
      }
      
      console.log(`üîß Criando ${usersToCreate.length} novos usu√°rios...`);
    }
    
    // Criar usu√°rios
    for (const user of defaultUsers) {
      console.log(`\nüë§ Criando usu√°rio: ${user.email}`);
      
      const { data, error } = await supabaseAdmin.auth.admin.createUser({
        email: user.email,
        password: user.password,
        email_confirm: true, // Confirmar e-mail automaticamente
        user_metadata: {
          name: user.name
        }
      });
      
      if (error) {
        console.log(`‚ö†Ô∏è  Erro ao criar usu√°rio ${user.email}:`, error.message);
        
        // Se for erro de usu√°rio j√° existente, continuar
        if (error.message.includes('already exists') || error.message.includes('duplicate')) {
          console.log(`‚ÑπÔ∏è  Usu√°rio ${user.email} j√° existe. Continuando...`);
        }
      } else {
        console.log(`‚úÖ Usu√°rio ${user.email} criado com sucesso!`);
        console.log(`   ID: ${data.user.id}`);
      }
    }
    
    console.log('\nüéâ Cria√ß√£o de usu√°rios conclu√≠da!');
    
    // Verificar novamente os usu√°rios
    const { data: finalUsers, error: finalError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (!finalError && finalUsers) {
      console.log(`\nüìã Total de usu√°rios agora: ${finalUsers.users.length}`);
      finalUsers.users.forEach((user, index) => {
        console.log(`\nUsu√°rio ${index + 1}:`);
        console.log(`  ID: ${user.id}`);
        console.log(`  Email: ${user.email}`);
        console.log(`  Confirmed: ${user.email_confirmed_at ? 'Sim' : 'N√£o'}`);
      });
    }
    
    console.log('\n‚úÖ Processo conclu√≠do! Agora voc√™ pode fazer login na aplica√ß√£o.');
    
  } catch (error) {
    console.error('‚ùå ERRO durante a cria√ß√£o de usu√°rios:', error.message);
    process.exit(1);
  }
}

createAuthUsers();