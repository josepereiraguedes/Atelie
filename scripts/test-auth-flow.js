// Script para testar o fluxo completo de autentica√ß√£o
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { resolve } from 'path';
import bcrypt from 'bcryptjs';

// Carregar vari√°veis de ambiente do arquivo .env
config({ path: resolve(process.cwd(), '.env') });

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceRoleKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

console.log('=== Teste de Fluxo de Autentica√ß√£o ===');

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå ERRO: Credenciais do Supabase n√£o configuradas!');
  process.exit(1);
}

// Criar cliente Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Criar cliente Supabase com service role key
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Credenciais de teste
const testUsers = [
  { email: 'pereiraguedes1988@gmail.com', password: '31051988' },
  { email: 'josepereiraguedes@yahoo.com.br', password: '31052025' }
];

async function testAuthFlow() {
  console.log('\nüöÄ Iniciando teste de fluxo de autentica√ß√£o...\n');
  
  // 1. Verificar conex√£o com o banco de dados
  console.log('1. üîç Verificando conex√£o com o banco de dados...');
  try {
    const { data, error } = await supabase
      .from('app_users')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erro de conex√£o:', error.message);
      return;
    }
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
  } catch (error) {
    console.log('‚ùå Erro de conex√£o:', error.message);
    return;
  }
  
  // 2. Verificar usu√°rios no banco de dados
  console.log('\n2. üë• Verificando usu√°rios no banco de dados...');
  try {
    const { data: users, error } = await supabaseAdmin
      .from('app_users')
      .select('*');
    
    if (error) {
      console.log('‚ùå Erro ao buscar usu√°rios:', error.message);
      return;
    }
    
    console.log(`‚úÖ Encontrados ${users.length} usu√°rios:`);
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (${user.email})`);
    });
  } catch (error) {
    console.log('‚ùå Erro ao verificar usu√°rios:', error.message);
    return;
  }
  
  // 3. Testar autentica√ß√£o personalizada
  console.log('\n3. üîê Testando autentica√ß√£o personalizada...');
  for (const user of testUsers) {
    console.log(`\n   Testando: ${user.email}`);
    
    try {
      // Buscar usu√°rio na tabela app_users
      const { data: dbUsers, error: dbError } = await supabaseAdmin
        .from('app_users')
        .select('*')
        .eq('email', user.email);
      
      if (dbError) {
        console.log(`   ‚ùå Erro ao buscar usu√°rio: ${dbError.message}`);
        continue;
      }
      
      if (!dbUsers || dbUsers.length === 0) {
        console.log(`   ‚ùå Usu√°rio n√£o encontrado no banco de dados`);
        continue;
      }
      
      const dbUser = dbUsers[0];
      console.log(`   ‚úÖ Usu√°rio encontrado: ${dbUser.name}`);
      
      // Verificar senha
      const isPasswordValid = await bcrypt.compare(user.password, dbUser.password_hash);
      if (isPasswordValid) {
        console.log(`   ‚úÖ Senha correta para ${user.email}`);
      } else {
        console.log(`   ‚ùå Senha incorreta para ${user.email}`);
        console.log(`      Senha esperada: ${user.password}`);
        console.log(`      Hash armazenado: ${dbUser.password_hash}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erro ao testar autentica√ß√£o: ${error.message}`);
    }
  }
  
  // 4. Testar autentica√ß√£o do Supabase (se poss√≠vel)
  console.log('\n4. üåê Testando autentica√ß√£o do Supabase...');
  for (const user of testUsers) {
    console.log(`\n   Testando login do Supabase: ${user.email}`);
    
    try {
      // Tentar login com Supabase Auth
      const { data, error } = await supabase.auth.signInWithPassword({
        email: user.email,
        password: user.password
      });
      
      if (error) {
        console.log(`   ‚ö†Ô∏è  Erro no login do Supabase: ${error.message}`);
      } else {
        console.log(`   ‚úÖ Login do Supabase bem-sucedido para ${user.email}`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Erro ao testar login do Supabase: ${error.message}`);
    }
  }
  
  console.log('\nüéâ Teste de fluxo de autentica√ß√£o conclu√≠do!');
}

testAuthFlow();