// Script para inicializar o banco de dados do Supabase
// Este script deve ser executado ap√≥s configurar corretamente as credenciais do Supabase

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { resolve } from 'path';

// Carregar vari√°veis de ambiente do arquivo .env
config({ path: resolve(process.cwd(), '.env') });

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('=== Script de Inicializa√ß√£o do Banco de Dados Supabase ===');
console.log('URL do Supabase:', supabaseUrl || 'N√ÉO CONFIGURADO');
console.log('Chave do Supabase:', supabaseKey ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');

if (!supabaseUrl || !supabaseKey) {
  console.error('\n‚ùå ERRO: Credenciais do Supabase n√£o configuradas!');
  console.error('Por favor, configure as vari√°veis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no arquivo .env');
  console.error('Siga as instru√ß√µes no arquivo .env para obter essas credenciais.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function initDatabase() {
  console.log('\nüöÄ Iniciando inicializa√ß√£o do banco de dados...');
  
  try {
    // Testar conex√£o com o Supabase
    console.log('üîç Testando conex√£o com o Supabase...');
    const { data, error } = await supabase
      .from('app_users')
      .select('count');
    
    if (error && error.message.includes('Invalid API key')) {
      console.error('\n‚ùå ERRO: Chave de API inv√°lida!');
      console.error('Verifique se a VITE_SUPABASE_ANON_KEY est√° correta.');
      process.exit(1);
    }
    
    if (error && !error.message.includes('The resource was not found')) {
      console.error('\n‚ö†Ô∏è  Aviso:', error.message);
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
    
    // Criar tabelas (se n√£o existirem)
    console.log('\nüìã Criando tabelas...');
    
    // Tabela de usu√°rios
    const { error: userTableError } = await supabase.rpc('create_user_table');
    if (userTableError) {
      console.log('‚ÑπÔ∏è  Tabela de usu√°rios j√° existe ou ser√° criada via SQL');
    } else {
      console.log('‚úÖ Tabela de usu√°rios criada');
    }
    
    // Tabela de produtos
    const { error: productTableError } = await supabase.rpc('create_product_table');
    if (productTableError) {
      console.log('‚ÑπÔ∏è  Tabela de produtos j√° existe ou ser√° criada via SQL');
    } else {
      console.log('‚úÖ Tabela de produtos criada');
    }
    
    // Tabela de clientes
    const { error: clientTableError } = await supabase.rpc('create_client_table');
    if (clientTableError) {
      console.log('‚ÑπÔ∏è  Tabela de clientes j√° existe ou ser√° criada via SQL');
    } else {
      console.log('‚úÖ Tabela de clientes criada');
    }
    
    // Tabela de transa√ß√µes
    const { error: transactionTableError } = await supabase.rpc('create_transaction_table');
    if (transactionTableError) {
      console.log('‚ÑπÔ∏è  Tabela de transa√ß√µes j√° existe ou ser√° criada via SQL');
    } else {
      console.log('‚úÖ Tabela de transa√ß√µes criada');
    }
    
    // Inserir usu√°rios padr√£o
    console.log('\nüë• Inserindo usu√°rios padr√£o...');
    const users = [
      {
        id: 'c5539cba-f202-42cd-a31c-5b53eca09cb7',
        name: 'Usu√°rio 1',
        email: 'pereiraguedes1988@gmail.com',
        password_hash: '$2a$10$8K1p/a0dURXAm7QiTRqUzuN0/S5ecC5RiJd4sKwks5uIZoWV611Om' // 31051988
      },
      {
        id: 'c436d6b4-9311-47d1-9115-2a91909ade5c',
        name: 'Usu√°rio 2',
        email: 'josepereiraguedes@yahoo.com.br',
        password_hash: '$2a$10$8K1p/a0dURXAm7QiTRqUzuN0/S5ecC5RiJd4sKwks5uIZoWV611Om' // 31052025
      }
    ];
    
    for (const user of users) {
      console.log(`\nüîß Inserindo usu√°rio: ${user.email}`);
      const { data, error } = await supabase
        .from('app_users')
        .upsert(user, { onConflict: 'email' });
      
      if (error) {
        console.log(`‚ö†Ô∏è  Erro ao inserir usu√°rio ${user.email}:`, error.message);
        // Tentar inserir sem o ID
        console.log(`üîß Tentando inserir ${user.email} sem ID...`);
        const { email, name, password_hash } = user;
        const { data: retryData, error: retryError } = await supabase
          .from('app_users')
          .upsert({ email, name, password_hash }, { onConflict: 'email' });
        
        if (retryError) {
          console.log(`‚ö†Ô∏è  Erro ao inserir ${user.email} sem ID:`, retryError.message);
        } else {
          console.log(`‚úÖ Usu√°rio ${user.email} inserido com sucesso (sem ID)`);
        }
      } else {
        console.log(`‚úÖ Usu√°rio ${user.email} inserido/atualizado com sucesso.`);
      }
    }
    
    // Verificar usu√°rios inseridos
    console.log('\nüîç Verificando usu√°rios inseridos...');
    const { data: finalUsers, error: finalError } = await supabase
      .from('app_users')
      .select('*');
    
    if (finalError) {
      console.log('‚ö†Ô∏è  Erro ao verificar usu√°rios:', finalError.message);
    } else {
      console.log(`‚úÖ Total de usu√°rios na tabela: ${finalUsers.length}`);
      finalUsers.forEach((user, index) => {
        console.log(`  ${index + 1}. ${user.name} (${user.email})`);
      });
    }
    
    console.log('\nüéâ Inicializa√ß√£o conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Execute o script SQL em scripts/supabase-setup.sql no painel do Supabase');
    console.log('2. Habilite RLS (Row Level Security) para todas as tabelas');
    console.log('3. Configure as pol√≠ticas de seguran√ßa');
    console.log('4. Inicie a aplica√ß√£o com "npm run dev"');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a inicializa√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar apenas se o script for chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  initDatabase();
}

export { initDatabase };