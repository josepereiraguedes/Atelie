import * as dotenv from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';

// Carregar vari√°veis de ambiente do arquivo .env
dotenv.config({ path: resolve(process.cwd(), '.env') });

console.log('üîç Verificando configura√ß√£o do Supabase...\n');

// Verificar vari√°veis de ambiente
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  process.exit(1);
}

console.log('‚úÖ Vari√°veis de ambiente carregadas');
console.log('   URL:', supabaseUrl);
console.log('   Key:', supabaseAnonKey.substring(0, 10) + '...');

// Criar cliente do Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarConfigSupabase() {
  try {
    console.log('\nüîê Verificando configura√ß√£o de autentica√ß√£o...');
    
    // Registrar um usu√°rio de teste
    console.log('\nüë§ Registrando usu√°rio de teste...');
    const timestamp = Date.now();
    const testEmail = `config-test-${timestamp}@example.com`;
    const testPassword = 'ConfigTest123!';
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword
    });
    
    if (signUpError) {
      console.error('‚ùå Erro ao registrar usu√°rio:', signUpError.message);
      
      // Verificar se √© um erro de configura√ß√£o
      if (signUpError.message.includes('Email signups are disabled')) {
        console.log('\n‚ö†Ô∏è  Configura√ß√£o do Supabase:');
        console.log('   - O registro por email est√° desativado');
        console.log('   - Acesse https://supabase.com/dashboard');
        console.log('   - Selecione seu projeto');
        console.log('   - V√° para Authentication > Settings');
        console.log('   - Ative "Enable email signups"');
      }
      
      process.exit(1);
    }
    
    console.log('‚úÖ Usu√°rio registrado com sucesso!');
    const userId = signUpData.user?.id;
    console.log('   User ID:', userId);
    
    // Verificar se o email precisa ser confirmado
    const emailConfirmed = signUpData.user?.confirmed_at !== null;
    console.log('   Email confirmado:', emailConfirmed ? 'Sim' : 'N√£o');
    
    if (!emailConfirmed) {
      console.log('\n‚ö†Ô∏è  Configura√ß√£o do Supabase:');
      console.log('   - A confirma√ß√£o de email est√° ativada');
      console.log('   - Para autentica√ß√£o imediata, desative "Enable email confirmations"');
      console.log('   - Acesse https://supabase.com/dashboard');
      console.log('   - Selecione seu projeto');
      console.log('   - V√° para Authentication > Settings');
      console.log('   - Desative "Enable email confirmations"');
    }
    
    // Tentar fazer login
    console.log('\nüîê Testando login...');
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (signInError) {
      console.error('‚ùå Erro ao fazer login:', signInError.message);
      
      // Verificar tipos espec√≠ficos de erros
      if (signInError.message.includes('Invalid login credentials')) {
        console.log('\nüí° Poss√≠veis causas:');
        console.log('   - Credenciais inv√°lidas');
        console.log('   - Usu√°rio n√£o existe ou foi exclu√≠do');
        console.log('   - Problemas com a configura√ß√£o do Supabase');
      } else if (signInError.message.includes('Email not confirmed')) {
        console.log('\nüí° O email n√£o foi confirmado:');
        console.log('   - Verifique sua caixa de entrada');
        console.log('   - Verifique a pasta de spam');
        console.log('   - Ou desative "Enable email confirmations" no Supabase');
      }
      
      process.exit(1);
    }
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log('   User ID:', signInData.user?.id);
    console.log('   Email:', signInData.user?.email);
    
    // Verificar se h√° sess√£o
    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      console.log('‚úÖ Sess√£o ativa estabelecida!');
    } else {
      console.log('‚ö†Ô∏è  Nenhuma sess√£o ativa encontrada');
    }
    
    // Fazer logout
    console.log('\nüëã Fazendo logout...');
    await supabase.auth.signOut();
    console.log('‚úÖ Logout realizado com sucesso!');
    
    console.log('\nüéâ Verifica√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã Resumo:');
    console.log('   ‚úÖ Conex√£o com Supabase estabelecida');
    console.log('   ‚úÖ Registro de usu√°rios funcionando');
    console.log('   ‚úÖ Login de usu√°rios funcionando');
    console.log('   ‚úÖ Sess√µes gerenciadas corretamente');
    
    if (!emailConfirmed) {
      console.log('\nüí° Recomenda√ß√£o:');
      console.log('   Para autentica√ß√£o imediata (sem confirma√ß√£o de email):');
      console.log('   1. Acesse https://supabase.com/dashboard');
      console.log('   2. Selecione seu projeto');
      console.log('   3. V√° para Authentication > Settings');
      console.log('   4. Desative "Enable email confirmations"');
    }
    
  } catch (error: any) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar verifica√ß√£o
verificarConfigSupabase();