// Script para configurar o banco de dados do Supabase
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import { resolve } from 'path';

// Carregar vari√°veis de ambiente do arquivo .env
config({ path: resolve(process.cwd(), '.env') });

async function setupDatabase() {
  console.log('üîç Configurando banco de dados do Supabase...');
  console.log('');
  
  // Verificar se as vari√°veis de ambiente est√£o definidas
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o configuradas corretamente');
    console.log('üí° Execute "npm run test:supabase" para verificar a configura√ß√£o');
    process.exit(1);
  }
  
  try {
    // Criar cliente do Supabase
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    console.log('üîå Conectado ao Supabase com sucesso!');
    console.log('');
    
    // Testar conex√£o b√°sica
    console.log('üß™ Testando conex√£o com o banco de dados...');
    const { data, error: testError } = await supabase
      .from('products')
      .select('id')
      .limit(1);
    
    if (testError && !testError.message.includes('The resource was not found')) {
      throw new Error(`Erro de conex√£o: ${testError.message}`);
    }
    
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida');
    console.log('');
    
    // Criar tabelas uma por uma usando a API do Supabase
    console.log('üîß Criando tabelas...');
    
    // Verificar se a tabela de produtos j√° existe
    console.log('   - Verificando tabela de produtos...');
    const { data: productsData, error: productsCheckError } = await supabase
      .from('products')
      .select('id')
      .limit(1);
    
    if (productsCheckError && productsCheckError.message.includes('The resource was not found')) {
      console.log('     üìù Tabela de produtos n√£o encontrada, criando...');
      // N√£o podemos criar tabelas diretamente via API JavaScript
      console.log('     ‚ÑπÔ∏è  As tabelas precisam ser criadas no painel do Supabase');
    } else {
      console.log('     ‚úÖ Tabela de produtos j√° existe');
    }
    
    // Verificar se a tabela de clientes j√° existe
    console.log('   - Verificando tabela de clientes...');
    const { data: clientsData, error: clientsCheckError } = await supabase
      .from('clients')
      .select('id')
      .limit(1);
    
    if (clientsCheckError && clientsCheckError.message.includes('The resource was not found')) {
      console.log('     üìù Tabela de clientes n√£o encontrada, criando...');
      console.log('     ‚ÑπÔ∏è  As tabelas precisam ser criadas no painel do Supabase');
    } else {
      console.log('     ‚úÖ Tabela de clientes j√° existe');
    }
    
    // Verificar se a tabela de transa√ß√µes j√° existe
    console.log('   - Verificando tabela de transa√ß√µes...');
    const { data: transactionsData, error: transactionsCheckError } = await supabase
      .from('transactions')
      .select('id')
      .limit(1);
    
    if (transactionsCheckError && transactionsCheckError.message.includes('The resource was not found')) {
      console.log('     üìù Tabela de transa√ß√µes n√£o encontrada, criando...');
      console.log('     ‚ÑπÔ∏è  As tabelas precisam ser criadas no painel do Supabase');
    } else {
      console.log('     ‚úÖ Tabela de transa√ß√µes j√° existe');
    }
    
    console.log('');
    console.log('üí° Instru√ß√µes para criar as tabelas:');
    console.log('   1. Acesse https://supabase.com/dashboard');
    console.log('   2. Selecione seu projeto');
    console.log('   3. V√° para "Table Editor" > "SQL Editor"');
    console.log('   4. Cole o conte√∫do do arquivo supabase-schema.sql');
    console.log('   5. Clique em "Run" para executar o script');
    console.log('');
    console.log('üìã Estrutura das tabelas:');
    console.log('   - products: Armazena informa√ß√µes dos produtos');
    console.log('   - clients: Armazena informa√ß√µes dos clientes');
    console.log('   - transactions: Armazena registros de transa√ß√µes');
    console.log('');
    console.log('üîê Configura√ß√µes de seguran√ßa:');
    console.log('   - Todas as tabelas t√™m RLS (Row Level Security) habilitado');
    console.log('   - Cada usu√°rio s√≥ pode acessar seus pr√≥prios dados');
    console.log('   - √çndices foram criados para melhorar a performance');
    
  } catch (error: any) {
    console.error(`‚ùå Erro ao configurar banco de dados: ${error.message}`);
    process.exit(1);
  }
}

// Executar a configura√ß√£o
setupDatabase();